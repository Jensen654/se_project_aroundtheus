!function(){"use strict";class e{constructor(e,t,s,i,n){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=i,this._handleLikeButton=n}_setEventListeners(){this._cardImageElement.addEventListener("click",(()=>this._handleImageClick({name:this._name,link:this._link}))),this._likeButton.addEventListener("click",(()=>{this._handleLikeButton(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this)}))}remove(){this._cardElement.remove()}setIsLiked(e){this._isLiked=e,this._renderLikes()}isLiked(){return this._isLiked}_renderLikes(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._isLiked||this._likeButton.classList.remove("card__like-button_active")}returnCardElement(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__trash-button"),this._cardDescription=this._cardElement.querySelector(".card__text"),this._cardImageElement=this._cardElement.querySelector(".card__img"),this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._cardDescription.textContent=this._name,this._renderLikes(),this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._options=e,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_checkFormValidity(){return Array.from(this._inputEls).every((e=>e.validity.valid))}toggleButtonState(){this._checkFormValidity()?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}_setEventListeners(e){e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}enableValidation(){this._inputEls=this._formElement.querySelectorAll(this._inputSelector),this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._inputEls.forEach((e=>{this._setEventListeners(e,this._submitButton)}))}}class s{constructor(e){this._popupElement=e,this._closeButton=this._popupElement.querySelector(".modal__close"),this._modalContainer=this._popupElement.querySelector(".js-modalContainer"),this._boundHandleEscapeClose=this._handleEscapeClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._boundHandleEscapeClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._boundHandleEscapeClose)}_handleEscapeClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(()=>{this.close()})),this._modalContainer.addEventListener("click",(e=>{e.stopPropagation()}))}}class i extends s{constructor(e,t,s){super(e),this._submitButton=this._popupElement.querySelector(".modal__button"),this._handleFormSubmit=t,this._buttonText=this._submitButton.textContent,this._loadingButtonText=s,this._popupForm=this._popupElement.querySelector(".modal__container-form"),this._inputList=this._popupElement.querySelectorAll(".modal__container-input")}showLoading(){this._submitButton.textContent=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._buttonText}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)}))}}const n={formSelector:".modal__container-form",inputSelector:".modal__container-input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_error",errorClass:"modal__error_visible"},o=document.querySelector("#card-modal"),r=document.querySelector("#edit-modal"),a=document.querySelector("#profile-image-modal"),l=r.querySelector(".modal__container-form"),c=o.querySelector(".modal__container-form"),d=a.querySelector(".modal__container-form"),h=document.querySelector("#image-modal"),u=document.querySelector("#trash-modal"),_=document.querySelector(".profile__image"),m=document.querySelector(".profile__edit-button"),p=document.querySelector(".profile__image_edit-button"),E=document.querySelector(".profile__add-button"),f=document.querySelector(".profile__title"),L=document.querySelector(".profile__description"),b=r.querySelector("#modal-name"),g=r.querySelector("#modal-description"),v=a.querySelector(".modal__container-input"),C=document.querySelector(".cards__list"),S="Saving...",k=new t(n,l),y=new t(n,c),B=new t(n,d);k.enableValidation(),y.enableValidation(),B.enableValidation();const I=new class extends s{constructor(e){super(e)}open(e){const t=this._popupElement.querySelector(".modal__image"),s=this._popupElement.querySelector(".modal__image-description");t.src=e.link,t.alt=e.name,s.textContent=e.name,super.open()}}(h);I.setEventListeners();const q=new i(r,(function(e){q.showLoading(),D.updateProfileInfo({name:e.title,about:e.description}).then((()=>{U.setUserInfo({nameInput:e.title,descriptionInput:e.description}),q.close()})).catch((e=>console.log(e))).finally((()=>{q.hideLoading()}))}),S),x=new i(o,(function(e){const t=e.title,s=e.description;x.showLoading(),D.addCard({name:t,link:s}).then((()=>{R({name:t,link:s}),x.close(),c.reset(),y.toggleButtonState()})).catch((e=>console.log(e))).finally((()=>{x.hideLoading()}))}),S),w=new i(a,(function(e){w.showLoading(),D.updateProfilePic(e).then((()=>{U.setAvatar(v.value),w.close(),d.reset(),y.toggleButtonState()})).catch((e=>console.log(e))).finally((()=>{w.hideLoading()}))}),S);q.setEventListeners(),x.setEventListeners(),w.setEventListeners();const P=new class extends s{constructor(e,t){super(e),this._submitButton=this._popupElement.querySelector(".modal__button"),this._buttonText=this._submitButton.textContent,this._loadingButtonText=t}showLoading(){this._submitButton.textContent=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._buttonText}setEventListeners(){super.setEventListeners(),this._modalContainer.addEventListener("submit",(e=>{e.preventDefault(),this._handleDeleteFormSubmit()}))}setSubmitAction(e){this._handleDeleteFormSubmit=e}}(u,S);P.setEventListeners();const U=new class{constructor(e){let{nameContainer:t,descriptionContainer:s,profilePic:i}=e;this._nameContainer=t,this._descriptionContainer=s,this._profilePic=i}getUserInfo(){const e={};return e.profileName=this._nameContainer.textContent,e.profileDescription=this._descriptionContainer.textContent,e}setAvatar(e){this._profilePic.src=e}setUserInfo(e){this._nameContainer.textContent=e.nameInput,this._descriptionContainer.textContent=e.descriptionInput}}({nameContainer:f,descriptionContainer:L,profilePic:_}),D=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_processResponse=e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`);getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._processResponse)}addCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._processResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._processResponse)}toggleCardLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._processResponse)}toggleCardDislike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._processResponse)}getProfileInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._processResponse)}updateProfileInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._processResponse)}updateProfilePic(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._processResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"1755563a-df02-4ecd-aa91-5c5958bedadf","Content-Type":"application/json"}}),T=new class{constructor(e,t){let{renderer:s}=e;this._render=s,this._container=t}renderItems(e){e.forEach((e=>this._render(e)))}addItem(e){this._container.prepend(e)}}({renderer:R},C);function $(e){I.open(e)}function A(e){P.open(),P.setSubmitAction((()=>(P.showLoading(),D.deleteCard(e._id).then((()=>{e.remove(),P.close()})).catch((e=>console.log(e))).finally((()=>{P.hideLoading()})))))}function V(e){e.isLiked?D.toggleCardDislike(e._id).then((t=>e.setIsLiked(t._isLiked))).catch((e=>console.log(e))):e.isLiked||D.toggleCardLike(e._id).then((t=>e.setIsLiked(t._isLiked))).catch((e=>console.log(e)))}function R(t){const s=new e(t,".card-template",$,A,V).returnCardElement();T.addItem(s)}D.getInitialCards().then((e=>{T.renderItems(e)})).catch((e=>console.log(e))),D.getProfileInfo().then((e=>(U.setAvatar(e.avatar),U.setUserInfo({nameInput:e.name,descriptionInput:e.about})))).catch((e=>console.log(e))),m.addEventListener("click",(function(e){!function(){const e=U.getUserInfo();b.value=e.profileName,g.value=e.profileDescription}(),q.open()})),E.addEventListener("click",(e=>{x.open()})),p.addEventListener("click",(()=>{w.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,